using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Security.Cryptography;
using System.IO;
namespace HashCache
{
    internal class CacheItem
    {
        public CacheItem(DateTime addtime,DateTime exptime, object addobj)
        {
            AddDateTime = addtime;
            ExpiryDateTime = exptime;
            CacheObj = addobj;
        }
        public DateTime AddDateTime { get; set; }
        public DateTime ExpiryDateTime { get; set; }
        public object CacheObj { get; set; }
        public long GetTimes { get; set; }
  
    }

    internal class CacheInHash
    {

        //static ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();
        static System.Timers.Timer timerforexpiry = new System.Timers.Timer(1000);
        static System.Timers.Timer timerforget = new System.Timers.Timer(1000);

        static ConcurrentDictionary<int, ConcurrentDictionary<string, CacheItem>> BigDictionary = new ConcurrentDictionary<int, ConcurrentDictionary<string, CacheItem>>();
        
        static CacheInHash()
        {
            //init big dictionary
            for (int i = 0; i < 10; i++)
            {
                 ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();
                 BigDictionary.AddOrUpdate(i, InnerDictionary, (newi, existingVal) =>
                {
                    return existingVal;
                });
            }
            //timerforexpiry.Elapsed += new System.Timers.ElapsedEventHandler(timerforexpiry_Elapsed);
          //  timerforexpiry.Start();

          timerforget.Elapsed += new System.Timers.ElapsedEventHandler(timerforget_Elapsed);
           timerforget.Start();
        }

        static void timerforget_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            int last = DateTime.Now.Second % 10;
            File.AppendAllText("c:\\1.txt", "------------" + last + "--------" + System.Environment.NewLine, Encoding.Default);

            ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();

            BigDictionary.TryGetValue(last, out InnerDictionary);

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            IOrderedEnumerable<KeyValuePair<string, CacheItem>> OrderedDictionary = InnerDictionary.OrderBy(v => v.Value.GetTimes);
            sw.Stop();
            Console.ForegroundColor = ConsoleColor.Yellow;
            string log = string.Format("count {0} ,sort gettimes cost {1}, Top 1 {2} , In {3}", InnerDictionary.Count, sw.Elapsed.TotalMilliseconds, OrderedDictionary.FirstOrDefault().Key, last) ;
            Console.WriteLine(log);
            File.AppendAllText("c:\\1.txt", log , Encoding.Default);
            sw.Restart();
            OrderedDictionary = OrderedDictionary.Take(50).OrderBy(v => v.Value.AddDateTime);
            sw.Stop();
            log = string.Format(",sort adddatetime and takecost {0} ,Top 1 {1}", sw.Elapsed.TotalMilliseconds, OrderedDictionary.FirstOrDefault().Key) + System.Environment.NewLine;
            Console.WriteLine(log);

            File.AppendAllText("c:\\1.txt", log, Encoding.Default);

            foreach (var item in OrderedDictionary)
            {

                InnerDictionary.TryRemove(item.Key, out CurrentItem);
                Console.WriteLine(string.Format("removed key {0}" ,item.Key));

                File.AppendAllText("c:\\1.txt", string.Format("removed key {0} AddDateTime {1} ExpiryTime {2} GetTimes {3}", item.Key, item.Value.AddDateTime.ToString("dd-HH:mm:ss"), item.Value.ExpiryDateTime.ToString("dd-HH:mm:ss"),item.Value.GetTimes) + System.Environment.NewLine, Encoding.Default);


            }

            File.AppendAllText("c:\\1.txt",  "------------" + last + "--------"+System.Environment.NewLine, Encoding.Default);
            //File.AppendAllLines("c:\\1.txt", , Encoding.Default);
        }

        static CacheItem CurrentItem = null;
        static void timerforexpiry_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            int last = DateTime.Now.Second % 10;

            ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();

            BigDictionary.TryGetValue(last, out InnerDictionary);

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            IOrderedEnumerable<KeyValuePair<string,CacheItem>>  OrderedDictionary=   InnerDictionary.OrderBy(v => v.Value.ExpiryDateTime);
            sw.Stop();
            Console.ForegroundColor = ConsoleColor.Red;
            string key = OrderedDictionary.FirstOrDefault().Key;
            Console.WriteLine(string.Format("count {0} sort expiry cost {1} Top 1 {2}", InnerDictionary.Count,sw.Elapsed.TotalMilliseconds,key));

            foreach (var item in OrderedDictionary.Take(200))
            {
                if (item.Value.ExpiryDateTime >= DateTime.Now)
                {
                    InnerDictionary.TryRemove(item.Key, out CurrentItem);
                    Console.WriteLine(string.Format("removed key {0}", item.Key));
                }

            }
        }





        




        public static void Add(string key, object val, TimeSpan ts)
        {
            int last = (int) (Convert.ToInt64(key) %  10); 
            
            ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();

            BigDictionary.TryGetValue(last,out InnerDictionary);



           CacheItem ci=  new CacheItem(DateTime.Now,DateTime.Now.Add(ts), val);
            InnerDictionary.AddOrUpdate(key, ci, 
                (key1, existingVal) =>
                {
                    existingVal.ExpiryDateTime.Add(ts);
                    return existingVal;
                });

        }


        public static object Get(string key)
        {
            int last = (int)(Convert.ToInt64(key) % 10);

            ConcurrentDictionary<string, CacheItem> InnerDictionary = new ConcurrentDictionary<string, CacheItem>();

            BigDictionary.TryGetValue(last, out InnerDictionary);

            CacheItem ci=null;
            if (InnerDictionary.TryGetValue(key, out ci))
            {
                ci.GetTimes++;
                if (ci.ExpiryDateTime < DateTime.Now)
                    return ci.CacheObj;
                else
                    //InnerDictionary.TryRemove(key, out ci);
                return null;
            }
            return null;

        }



    }
    
    static void Main(string[] args)
        {
            for (int i = 0; i < 1000; i++)
            {
                CacheInHash.Add(i.ToString(),i+1,TimeSpan.FromMinutes(i%10));

                CacheInHash.Get((i%10).ToString());

                System.Threading.Thread.Sleep(100);
            }
            Console.Read();
        }
}
