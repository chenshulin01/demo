/// <summary>
    /// 数据转化类
    /// </summary>
    internal class DataEmitHelper
    {
        public static List<T> ToList<T>(DataTable dt)
        {
            List<T> list = new List<T>();
            DataTableEntityBuilder<T> eblist = DataTableEntityBuilder<T>.CreateBuilder(dt.Rows[0]);
            foreach (DataRow info in dt.Rows)
            {
                list.Add(eblist.Build(info));
            }
            //dt.Dispose();
            //dt = null;
            return list;
        }



        public static T ToItem<T>(DataRow row)
        {
            DataTableEntityBuilder<T> eblist = DataTableEntityBuilder<T>.CreateBuilder(row);
            return eblist.Build(row);
        }


        partial class DataTableEntityBuilder<T>
        {
            private static readonly MethodInfo getValueMethod = typeof(DataRow).GetMethod("get_Item", new Type[] { typeof(int) });
            private static readonly MethodInfo isDBNullMethod = typeof(DataRow).GetMethod("IsNull", new Type[] { typeof(int) });
            private delegate T Load(DataRow dataRecord);

            private Load handler;
            private DataTableEntityBuilder() { }

            public T Build(DataRow dataRecord)
            {
                return handler(dataRecord);
            }

            public static DataTableEntityBuilder<T> CreateBuilder(DataRow dataRow)
            {
                DataTableEntityBuilder<T> dynamicBuilder = new DataTableEntityBuilder<T>();
                string key = typeof(T).Name;
                if (HttpRuntime.Cache[key] == null)
                {
                    DynamicMethod method = new DynamicMethod("DynamicCreateEntity", typeof(T), new Type[] { typeof(DataRow) }, typeof(T), true);
                    ILGenerator generator = method.GetILGenerator();
                    LocalBuilder result = generator.DeclareLocal(typeof(T));
                    generator.Emit(OpCodes.Newobj, typeof(T).GetConstructor(Type.EmptyTypes));
                    generator.Emit(OpCodes.Stloc, result);

                    for (int index = 0; index < dataRow.ItemArray.Length; index++)
                    {
                        PropertyInfo propertyInfo = typeof(T).GetProperty(dataRow.Table.Columns[index].ColumnName);
                        Label endIfLabel = generator.DefineLabel();
                        if (propertyInfo != null && propertyInfo.GetSetMethod() != null)
                        {
                            generator.Emit(OpCodes.Ldarg_0);
                            generator.Emit(OpCodes.Ldc_I4, index);
                            generator.Emit(OpCodes.Callvirt, isDBNullMethod);
                            generator.Emit(OpCodes.Brtrue, endIfLabel);
                            generator.Emit(OpCodes.Ldloc, result);
                            generator.Emit(OpCodes.Ldarg_0);
                            generator.Emit(OpCodes.Ldc_I4, index);
                            generator.Emit(OpCodes.Callvirt, getValueMethod);
                            generator.Emit(OpCodes.Unbox_Any, propertyInfo.PropertyType);
                            generator.Emit(OpCodes.Callvirt, propertyInfo.GetSetMethod());
                            generator.MarkLabel(endIfLabel);
                        }
                    }
                    generator.Emit(OpCodes.Ldloc, result);
                    generator.Emit(OpCodes.Ret);
                    dynamicBuilder.handler = (Load)method.CreateDelegate(typeof(Load));
                    HttpRuntime.Cache[key] = dynamicBuilder;
                }
                else
                {
                    dynamicBuilder = HttpRuntime.Cache[key] as DataTableEntityBuilder<T>;
                }
                return dynamicBuilder;
            }
        }


    }
